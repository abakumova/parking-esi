#server.port=8086
server.port=0
spring.datasource.url=jdbc:postgresql://localhost:5432/booking_db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
logging.level.com=DEBUG
spring.application.name=booking-service
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.client.instance.preferIpAddress=true
eureka.client.eureka-server-port=8761
spring.data.web.pageable.default-page-size=20
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.renewalPercentThreshold=0.85
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER
eureka.instance.instance-id=${random.uuid}

webclient.email=webclient.esi.tartu@ut.ee
webclient.password=webclient.esi.tartu@ut.ee.password


##KAFKA
### User Management Service Kafka Consumer Configuration
##spring.kafka.consumer.bootstrap-servers=localhost:9092
##spring.kafka.consumer.group-id=booking-group
##spring.kafka.consumer.auto-offset-reset=latest
##spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.user.model
#
## User Management Service Kafka Producer Configuration
#spring.kafka.producer.bootstrap-servers=localhost:9092
#spring.kafka.producer.properties.spring.json.trusted.packages=edu.tartu.esi
#
## User Management Service Default Topic
#spring.kafka.template.default-topic=booking-topic
#
#spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.type.mapping=bookingmessage:edu.tartu.esi.kafka.message.BookingMessage
#
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#
## "order" is a random token word that need to be shared between the two bindings
##spring.kafka.consumer.properties.spring.json.type.mapping=userrequestmessage:edu.tartu.esi.kafka.message.UserRequestMessage

######################## Producer booking   ########################
spring.kafka.producer.bootstrap-servers:localhost:9092
spring.kafka.producer.key-serializer:org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer:org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.type.mapping=order:com.esi.orderservice.model.Order
spring.kafka.producer.properties.spring.json.type.mapping=bookingdto:edu.tartu.esi.dto.BookingDto
######################## Consumer analytics   ########################
spring.kafka.consumer.bootstrap-servers:localhost:9092
spring.kafka.consumer.group-id:analyticsGroup
spring.kafka.consumer.auto-offset-reset:earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# "order" is a random token word that need to be shared between the two bindings
spring.kafka.consumer.properties.spring.json.type.mapping=bookingdto:edu.tartu.esi.dto.BookingDto
spring.kafka.consumer.enable-auto-commit=false
#  * means deserialize all.
spring.kafka.consumer.properties.spring.json.trusted.packages=*